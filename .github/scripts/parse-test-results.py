#!/usr/bin/env python3
"""
UseCase 테스트 결과 파싱 스크립트
GitHub Actions에서 사용하여 테스트 결과를 구조화합니다.
"""

import re
import sys
import json
from typing import Dict, List, Any

def parse_xcodebuild_log(log_file: str) -> Dict[str, Any]:
    """xcodebuild 로그에서 테스트 결과를 파싱합니다."""
    
    results = {
        'total_tests': 0,
        'passed_tests': 0,
        'failed_tests': 0,
        'success_rate': 0.0,
        'failed_test_details': [],
        'test_suites': []
    }
    
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except FileNotFoundError:
        return results
    
    # Test Case 패턴 매칭
    test_case_pattern = r"Test Case '(.+?)' (passed|failed) \((.+?)\)"
    test_cases = re.findall(test_case_pattern, content)
    
    # 실패한 테스트의 상세 정보 패턴
    failure_pattern = r"Test Case '(.+?)' failed.*?\n(.*?)(?=Test Case|\Z)"
    failures = re.findall(failure_pattern, content, re.DOTALL)
    
    # 테스트 결과 집계
    for test_name, status, duration in test_cases:
        results['total_tests'] += 1
        if status == 'passed':
            results['passed_tests'] += 1
        else:
            results['failed_tests'] += 1
            
    # 실패한 테스트 상세 정보 수집
    for test_name, failure_detail in failures:
        # 불필요한 로그 제거하고 핵심 에러 메시지만 추출
        clean_detail = re.sub(r'\s+', ' ', failure_detail.strip())
        clean_detail = clean_detail[:300] + '...' if len(clean_detail) > 300 else clean_detail
        
        results['failed_test_details'].append({
            'test_name': test_name,
            'failure_message': clean_detail
        })
    
    # 성공률 계산
    if results['total_tests'] > 0:
        results['success_rate'] = round(
            (results['passed_tests'] / results['total_tests']) * 100, 1
        )
    
    return results

def format_github_comment(results: Dict[str, Any]) -> str:
    """GitHub 댓글용 마크다운 포맷으로 변환합니다."""
    
    status_emoji = '✅' if results['failed_tests'] == 0 else '❌'
    status_text = 'All Tests Passed' if results['failed_tests'] == 0 else 'Some Tests Failed'
    
    # 진행률 바 생성
    if results['total_tests'] > 0:
        passed_ratio = results['passed_tests'] / results['total_tests']
        progress_bar = '🟢' * int(passed_ratio * 10) + '🔴' * int((1 - passed_ratio) * 10)
    else:
        progress_bar = '⚪' * 10
    
    comment = f"""## {status_emoji} UseCase Layer Test Results

**📊 Test Summary:**
- **Total Tests:** {results['total_tests']}
- **Passed:** {results['passed_tests']} ✅
- **Failed:** {results['failed_tests']} ❌
- **Success Rate:** {results['success_rate']}%

**Progress:** {progress_bar}

**Status:** {status_text}
"""
    
    # 실패한 테스트 상세 정보 추가
    if results['failed_test_details']:
        comment += "\n## 🔍 Failed Tests Details\n\n"
        for failure in results['failed_test_details']:
            comment += f"❌ **{failure['test_name']}**\n"
            comment += f"```\n{failure['failure_message']}\n```\n\n"
    
    comment += f"""
---
🤖 **Generated by GitHub Actions** | 🧪 **Domain Layer Tests** | ⏰ **$(date)**
"""
    
    return comment

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 parse-test-results.py <log_file>")
        sys.exit(1)
    
    log_file = sys.argv[1]
    results = parse_xcodebuild_log(log_file)
    
    # GitHub Actions 출력 설정
    with open('test_results.json', 'w') as f:
        json.dump(results, f, indent=2)
    
    # GitHub Actions 환경 변수 설정
    with open('github_outputs.txt', 'w') as f:
        f.write(f"total_tests={results['total_tests']}\n")
        f.write(f"passed_tests={results['passed_tests']}\n")
        f.write(f"failed_tests={results['failed_tests']}\n")
        f.write(f"success_rate={results['success_rate']}\n")
    
    # 댓글 내용 생성
    comment = format_github_comment(results)
    with open('github_comment.md', 'w') as f:
        f.write(comment)
    
    # 테스트 실패 시 exit code 1
    sys.exit(1 if results['failed_tests'] > 0 else 0)

if __name__ == "__main__":
    main()