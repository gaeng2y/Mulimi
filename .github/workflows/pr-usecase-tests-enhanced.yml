name: 🧪 Enhanced UseCase Tests on PR

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Project/Domain/**'
      - 'Project/Data/**'
      - '.github/workflows/**'
      - 'Tuist/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  usecase-tests:
    name: 🧪 Domain Layer Tests
    runs-on: macos-14
    
    permissions:
      contents: read
      pull-requests: write
      checks: write
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔧 Setup mise
        run: |
          curl -s https://mise.run | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      - name: 📦 Install Tuist
        run: |
          mise install
          eval "$(mise activate bash --shims)"
          echo "$(mise where tuist)/bin" >> $GITHUB_PATH
          
      - name: ✅ Verify Installation
        run: |
          tuist --version
          
      - name: 📦 Install Dependencies
        run: tuist install
        
      - name: 🏗️ Generate Project
        run: tuist generate
        
      - name: 🧪 Run UseCase Tests
        run: |
          set -o pipefail
          xcodebuild test \
            -workspace Mulimi.xcworkspace \
            -scheme DomainLayer \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.2' \
            -resultBundlePath TestResults.xcresult \
            CODE_SIGNING_ALLOWED=NO | tee test_output.log
            
      - name: 📊 Parse Test Results
        if: always()
        run: |
          python3 .github/scripts/parse-test-results.py test_output.log
          
          # GitHub Actions 출력 설정
          cat github_outputs.txt >> $GITHUB_OUTPUT
          
      - name: 💬 Comment Test Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // 댓글 내용 읽기
            const comment = fs.readFileSync('github_comment.md', 'utf8');
            
            // 기존 댓글 찾기
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('UseCase Layer Test Results')
            );
            
            if (existingComment) {
              // 기존 댓글 업데이트
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // 새 댓글 생성
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: 📊 Publish Test Report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 'UseCase Tests Report'
          path: 'TestResults.xcresult'
          reporter: 'swift-xunit'
          fail-on-error: false
          
      - name: 📁 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: usecase-test-results-${{ github.run_number }}
          path: |
            TestResults.xcresult
            test_output.log
            test_results.json
            github_comment.md
          retention-days: 30